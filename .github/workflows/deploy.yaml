name: jetbrain devops task

on:
  push:
    branches:
      - 'feature/**'
      - 'dev/**'
  workflow_dispatch:

permissions: #This gives the repoâ€™s GITHUB_TOKEN the rights to push to GHCR from Actions.
  contents: read
  packages: write
env:
  REGISTRY: ghcr.io/mina-farajian/jetbrain-task
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
   runs-on: ubuntu-latest
   outputs:
     safe_branch: ${{ steps.branch.outputs.safe_branch }}
   steps:
     - name: Checkout Code
       uses: actions/checkout@v3

     - name: Set up QEMU (for cross-platform builds)
       uses: docker/setup-qemu-action@v2

     - name: Set up Docker Buildx   #allows multi-platform builds, caching, and advanced Docker features.
       uses: docker/setup-buildx-action@v3

     - name: Get branch name
       id: branch
       run: |
          BRANCH="${GITHUB_REF_NAME}"
          SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' \
                        | sed 's#[/_]#-#g' | sed 's#[^a-z0-9-]##g')
          echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT

     - name: Login to GHCR
       uses: docker/login-action@v2
       with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

     - name: Check if image exists in GHCR
       id: check-image
       run: |
         IMAGE="ghcr.io/${{ github.repository_owner }}/jetbrain-task:${{ github.sha }}"
         echo "Checking if $IMAGE exists..."
         if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
           echo "exists=true" >> $GITHUB_OUTPUT
         else
           echo "exists=false" >> $GITHUB_OUTPUT
         fi

     - name: Build and push
       id: build
       if: steps.check-image.outputs.exists == 'false'
       uses: docker/build-push-action@v4
       with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{env.REGISTRY}}:dev-${{ steps.branch.outputs.safe_branch }}-${{ github.sha }} 
            ${{env.REGISTRY}}:${{ github.sha }} 

     - name: Run Trivy vulnerability scanner
       uses: aquasecurity/trivy-action@0.29.0
       with:
             image-ref: ${{env.REGISTRY}}:${{ github.sha }}
             format: 'table'
             ignore-unfixed: true #if find high and critical issue exists pipeline will be stopped
             vuln-type: 'os,library'
             severity: 'CRITICAL,HIGH'
             cache: 'true'
             output: trivy.txt


     - name: Publish Trivy Output to Summary
       run: |
           if [[ -s trivy.txt ]]; then
             {
               echo "### Security Output"
               echo "<details><summary>Click to expand</summary>"
               echo ""
               echo '```terraform'
               cat trivy.txt
               echo '```'
               echo "</details>"
             } >> $GITHUB_STEP_SUMMARY
           fi

#################################################### Dev ############################################################################################
  deploy-dev:
       needs: build-and-push
       if: startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/dev/')
       runs-on: ubuntu-latest

       steps:
         - name: Checkout repository
           uses: actions/checkout@v3

         - name: Set up Kubeconfig
           run: |
             mkdir -p ~/.kube
             echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config
             chmod 600 ~/.kube/config

         - name: Deploy to Staging with Helm
           run: |
             IMAGE_TAG=dev-${{ steps.branch.outputs.safe-branch }}-${{ github.sha }}
             NAMESPACE=dev-${{ needs.build-and-push.outputs.safe_branch }} 
             echo "Deploying image: ${{env.REGISTRY}}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} to namespace $NAMESPACE"
             
             helm upgrade --install my-app ./charts \
               --namespace $NAMESPACE \
               --create-namespace \
               --set image.repository=${{env.REGISTRY}}/${{ env.IMAGE_NAME }} \
               --set image.tag=${IMAGE_TAG} \
               -f charts/values-dev.yaml





############################################### Stage #################################################################################################

  deploy-staging:
     needs: build-and-push
     if: github.ref == 'refs/heads/stage'
     runs-on: ubuntu-latest

     steps:
         - name: Checkout repository
           uses: actions/checkout@v3

         - name: Set up Kubeconfig
           run: |
             mkdir -p ~/.kube
             echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
             chmod 600 ~/.kube/config

         - name: Deploy to Staging
           run: |
            IMAGE_TAG=${{ github.sha }}
            echo "Deploying image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} to staging"

            helm upgrade --install my-app ./charts \
            --namespace staging \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${IMAGE_TAG} \
            -f charts/values-stage.yaml

################################################# Production ###############################################################################################

  deploy-production:
     needs: build-and-push
     if: github.ref == 'refs/heads/main'
     runs-on: ubuntu-latest
     environment:
       name: production
       url: https://your-production-url.com
     concurrency: production  # Prevent multiple prod deploys at same time

     steps:
       - name: Await Manual Approval
         uses: trstringer/manual-approval@v1
         with:
           secret: ${{ github.TOKEN }}
           approvers: "Mina-Farajian"
           minimum-approvals: 1
           issue-title: "Manual Approval Required for Production deploy"
           issue-body: "Please approve or deny the deployment."

       - name: Checkout repository
         uses: actions/checkout@v3

       - name: Set up Kubeconfig
         run: |
           mkdir -p ~/.kube
           echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
           chmod 600 ~/.kube/config

       - name: Deploy to Production with Helm
         run: |
           IMAGE_TAG=${{ github.sha }}
           echo "Deploying image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} to production"

           helm upgrade --install my-app ./charts \
             --namespace production \
             --create-namespace \
             --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
             --set image.tag=${IMAGE_TAG} \
             -f charts/values-prod.yaml