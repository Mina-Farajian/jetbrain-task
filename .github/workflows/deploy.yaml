name: JetBrains Devops task

on:
  push:
    branches:
      - 'feature/**'
      - 'dev/**'
  pull_request:
    types: [ opened ]
    branches:
      - 'stage'
  workflow_dispatch: {}

permissions: #This gives the repoâ€™s GITHUB_TOKEN the rights to push to GHCR from Actions.
  contents: read
  packages: write

env:
  IMAGE_REPO: ghcr.io/mina-farajian/jetbrain-task
  STAGE_NS: staging
  PROD_NS: production

jobs:
  build:
   if: github.event_name != 'workflow_dispatch' # skip build on prod deploy
   runs-on: ubuntu-latest
   outputs:
     safe_branch: ${{ steps.branch.outputs.safe_branch }}
   steps:
     - name: Checkout Code
       uses: actions/checkout@v3

     - name: Compute safe branch
       id: branch
       run: |
         BRANCH="${GITHUB_REF_NAME}"
         SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' \
                       | sed 's#[/_]#-#g' | sed 's#[^a-z0-9-]##g')
         echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT

     - name: Set up QEMU (for cross-platform builds)
       uses: docker/setup-qemu-action@v2

     - name: Set up Docker Buildx   #allows multi-platform builds, caching, and advanced Docker features.
       uses: docker/setup-buildx-action@v3

     - name: Login to GHCR
       uses: docker/login-action@v2
       with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

     - name: Build and push (dev)
       if: (startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/dev/'))
       uses: docker/build-push-action@v4
       with:
         context: .
         file: ./Dockerfile
         push: true
         platforms: linux/amd64
         tags: |
           ${{ env.IMAGE_REPO }}:dev-${{ steps.branch.outputs.safe_branch }}-${{ github.sha }}          

     - name: Build and push (stage)
       if: github.ref == 'refs/heads/stage'
       uses: docker/build-push-action@v4
       with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_REPO }}:${{ github.sha }}
#################################################### Dev ############################################################################################

  deploy-dev:
       needs: build
       if: startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/dev/')
       runs-on: ubuntu-latest
       env:
         IMAGE_TAG: dev-${{ needs.build.outputs.safe_branch }}-${{ github.sha }}
         NAMESPACE: dev-${{ needs.build.outputs.safe_branch }}
       steps:
         - name: Checkout repository
           uses: actions/checkout@v3

         - name: Set up Kubeconfig
           run: |
             mkdir -p ~/.kube
             echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config
             chmod 600 ~/.kube/config

         - name: Deploy to Dev with Helm (dynamic)
           run: |
             echo "Deploying ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} to ns $NAMESPACE"
             
             helm upgrade --install my-app ./charts \
               --namespace "$NAMESPACE" \
               --create-namespace \
               --set image.repository=${{ env.IMAGE_REPO }} \
               --set image.tag=${IMAGE_TAG} \
               -f charts/values-dev.yaml
############################################### Stage #################################################################################################

  deploy-staging:
     needs: build
     if: github.ref == 'refs/heads/stage'
     runs-on: ubuntu-latest
     outputs:
       image_tag: ${{ env.IMAGE_TAG }}
     env:
      IMAGE_TAG: ${{ github.sha }}
      NAMESPACE: staging
     steps:
         - name: Checkout repository
           uses: actions/checkout@v3

         - name: Set up Kubeconfig
           run: |
             mkdir -p ~/.kube
             echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config
             chmod 600 ~/.kube/config
             
         - name: Trivy scan (staging image)
           uses: aquasecurity/trivy-action@0.29.0
           with:
             image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
             format: 'table'
             ignore-unfixed: true
             vuln-type: 'os,library'
             severity: 'CRITICAL,HIGH'
             cache: 'true'
             output: trivy.txt

         - name: Publish Trivy summary
           run: |
             if [[ -s trivy.txt ]]; then
               {
                 echo "### Trivy scan for ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"
                 echo '```'
                 cat trivy.txt
                 echo '```'
               } >> $GITHUB_STEP_SUMMARY
             fi

         - name: Deploy to Staging
           run: |
            echo "Deploying image: ${{ env.REGISTRY }} ${{ env.IMAGE_TAG }} to  ns ${{ env.STAGE_NS }}"

            helm upgrade --install my-app ./charts \
            --atomic \ 
            --namespace ${{ env.STAGE_NS}} \
            --set image.repository=${{ env.IMAGE_REPO }} \
            --set image.tag=${IMAGE_TAG} \
            -f charts/values-stage.yaml
             
#         - name: Run smoke tests
#           run: |
#             sudo kubectl -n staging port-forward svc/my-service-stage 80:80 &
#             sleep 5
#             curl -f http://127.0.0.1:80/
################################################# Production ###############################################################################################

  deploy-production:
     if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
     needs: deploy-staging
     runs-on: ubuntu-latest
     permissions:
      issues: write
     concurrency: production  # Prevent multiple prod deploys at same time
     env:
       IMAGE_TAG: "${{ env.IMAGE_REPO }}:${{ needs.deploy-staging.outputs.image-tag }}"
     # IMAGE_TAG: ${{ github.event.inputs.image_tag }}  # <-- Use input
     steps:
       - name: Await Manual Approval
         uses: trstringer/manual-approval@v1
         with:
           secret: ${{ secrets.GITHUB_TOKEN }}
           approvers: Mina-Farajian
           minimum-approvals: 1
           issue-title: "Manual Approval Required for Production deploy"
           issue-body: "Please approve or deny the deployment."

       - name: Checkout repository
         uses: actions/checkout@v3

       - name: Login to GHCR (for verify)
         uses: docker/login-action@v2
         with:
           registry: ghcr.io
           username: ${{ github.actor }}
           password: ${{ secrets.GITHUB_TOKEN }}

       - name: Verify the staging image exists (no rebuild)
         run: |
           IMAGE="${{ env.IMAGE_TAG }}"
           echo "Checking $IMAGE"
           if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
             echo "Image exists."
           else
             echo "ERROR: $IMAGE not found. Production must reuse staging image."
           fi

       - name: Set up Kubeconfig
         run: |
           mkdir -p ~/.kube
           echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config
           chmod 600 ~/.kube/config

       - name: Deploy to Production with Helm
         run: |
           echo "Deploying image: ${{ env.IMAGE_REPO }}/${{ env.IMAGE_TAG }} to ${{ env.PROD_NS }}"

           helm upgrade --install my-app ./charts\
             --atomic \
             --namespace ${{ env.PROD_NS}} \
             --set image.repository=${{ env.IMAGE_REPO }} \
             --set image.tag=${{ env.IMAGE_TAG }} \
             -f charts/values-prod.yaml
           
       - name: Write to job summary
         run: |
            echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
            echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
            echo "**Image:** ghcr.io/mina-farajian/jetbrain-task:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Helm Status" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            helm status my-app --namespace ${{ env.PROD_NS }} >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY