name: jetbrain devops task

on:
  push:
    branches:
      - 'feature/**'
      - 'dev/**'
  workflow_dispatch:


#This gives the repoâ€™s GITHUB_TOKEN the rights to push to GHCR from Actions.
permissions:
  contents: read
  packages: write


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:

  build-and-push:
#   if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/feature/') #if push with branch name starts with feature*
   runs-on: ubuntu-latest

   steps:
     - name: Checkout Code
       uses: actions/checkout@v3

     - name: Set up QEMU (for cross-platform builds)
       uses: docker/setup-qemu-action@v2

     - name: Set up Docker Buildx #allows multi-platform builds, caching, and advanced Docker features.
       uses: docker/setup-buildx-action@v3

     - name: Get branch name
       id: branch
       run: |
          BRANCH="${GITHUB_REF_NAME}"
          SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' \
                        | sed 's#[/_]#-#g' | sed 's#[^a-z0-9-]##g')
          echo "safe_branch=$SAFE_BRANCH" >> $GITHUB_OUTPUT
      

     - name: Login to GHCR
       uses: docker/login-action@v2
       with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


     - name: Build and push
       id: build
       uses: docker/build-push-action@v4
       with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository_owner }}/jetbrain-task:dev-${{ steps.branch.outputs.safe }}-${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/jetbrain-task:${{ github.sha }} #staging pulls the image from GHCR using the SHA-only tag #we do NOT rebuild the image

     - name: Run Trivy vulnerability scanner
       uses: aquasecurity/trivy-action@0.29.0
       with:
             image-ref: ghcr.io/${{ github.repository_owner }}/jetbrain-task:${{ github.sha }}
             format: 'table'
             ignore-unfixed: true
             vuln-type: 'os,library'
             severity: 'CRITICAL,HIGH'
             cache: 'true'
             output: trivy.txt




#################################################### Dev ############################################################################################
   build-and-deploy-dev:
       if: github.ref == 'refs/heads/feature'
       runs-on: ubuntu-latest

       steps:
         - name: Checkout repository
           uses: actions/checkout@v3

         - name: Set up Kubeconfig
           run: |
             mkdir -p ~/.kube
             echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
             chmod 600 ~/.kube/config

         - name: Deploy to Staging with Helm
           run: |
             IMAGE_TAG=dev-${{ steps.branch.outputs.safe }}-${{ github.sha }}
             echo "Deploying image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} to staging"

             helm upgrade --install my-app ./charts \
               --namespace staging \
               --create-namespace \
               --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
               --set image.tag=${IMAGE_TAG} \
               -f charts/values-dev.yaml





############################################### Stage #################################################################################################

   build-and-deploy-staging:
     if: github.ref == 'refs/heads/stage'
     runs-on: ubuntu-latest

     steps:
         - name: Checkout repository
           uses: actions/checkout@v3

         - name: Set up Kubeconfig
           run: |
             mkdir -p ~/.kube
             echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
             chmod 600 ~/.kube/config

         - name: Deploy to Staging
           run: |
            IMAGE_TAG=${{ github.sha }}
            echo "Deploying image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} to staging"

            helm upgrade --install my-app ./charts \
            --namespace staging \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${IMAGE_TAG} \
            -f charts/values-stage.yaml

################################################# Production ###############################################################################################

   deploy-production:
     needs: build-and-deploy-staging
     if: github.ref == 'refs/heads/main'
     runs-on: ubuntu-latest
     environment:
       name: production
       url: https://your-production-url.com
     concurrency: production  # Prevent multiple prod deploys at same time

     steps:
       - name: Await Manual Approval
         uses: trstringer/manual-approval@v1
         with:
           secret: ${{ github.TOKEN }}
           approvers: user1, user2, admins,leaders
           minimum-approvals: 1
           issue-title: "Manual Approval Required for Production deploy"
           issue-body: "Please approve or deny the deployment."


       - name: Checkout repository
         uses: actions/checkout@v3

       - name: Set up Kubeconfig
         run: |
           mkdir -p ~/.kube
           echo "${{ secrets.KUBECONFIG_CONTENT }}" > ~/.kube/config
           chmod 600 ~/.kube/config

       - name: Deploy to Production with Helm
         run: |
           IMAGE_TAG=${{ github.sha }}
           echo "Deploying image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG} to production"

           helm upgrade --install my-app ./charts \
             --namespace production \
             --create-namespace \
             --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
             --set image.tag=${IMAGE_TAG} \
             -f charts/values-prod.yaml

       - name: Run Trivy vulnerability scanner
         uses: aquasecurity/trivy-action@0.29.0
         with:
            - image-ref: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
            - format: 'table'
            - ignore-unfixed: true
            - vuln-type: 'os,library'
            - severity: 'CRITICAL,HIGH'
            - output: trivy.txt

       - name: Upload Trivy scan report
         uses: actions/upload-artifact@v4
         with:
           - name: trivy-scan-report
           - path: trivy.txt